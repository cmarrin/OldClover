/*-------------------------------------------------------------------------
    This source file is a part of Clover
    For the latest info, see https://github.com/cmarrin/Clover
    Copyright (c) 2021-2022, Chris Marrin
    All rights reserved.
    Use of this source code is governed by the MIT license that can be
    found in the LICENSE file.
-------------------------------------------------------------------------*/

// Test constants, vars, operands and expressions

def TestSizeDef   12;

const int testIntConst 0xfc;
const float testFloatConst 3.5;

table int testIntTable
{
    1 2 3
    7 8 9
}

table float testFloatTable
{
    1.5 2.5 3.5
    7.5 8.5 9.5
}

int testIntGlobal;
float testFloatGlobal;

function space(int n)
{
    while (n--) {
        log(" ");
    }
}

function showIntResults(int testNo, int exp, int act)
{
    int n;
    if (testNo > 9) {
        n = 19;
    } else {
        n = 20;
    }
   
    log("    Test %i: ", testNo);
    space(n);
    if (exp != act) {
        log("FAIL: exp %i, got %i\n", exp, act);
    } else {
        log("Pass\n");
    }
}

function showFloatResults(int testNo, float exp, float act)
{
    int n;
    if (testNo > 9) {
        n = 19;
    } else {
        n = 20;
    }
   
    log("    Test %i: ", testNo);
    space(n);
    if (exp != act) {
        log("FAIL: exp %f, got %f\n", exp, act);
    } else {
        log("Pass\n");
    }
}

function test()
{
    int i, j;
    float f;
    
    testIntGlobal = 42;
    testFloatGlobal = 6.5;

    log("\nTest constants, vars, operands and expressions\n");

    log("\nTest Int values\n"); 
    showIntResults(1, 12, TestSizeDef);
    showIntResults(2, 0xfc, testIntConst);
    showIntResults(3, 2, testIntTable[1]);
    showIntResults(4, 7, testIntTable[3]);
    showIntResults(5, 42, testIntGlobal);
    
    log("\nTest Int operators\n"); 
    showIntResults(6, 294, testIntConst + testIntGlobal);
    showIntResults(7, 210, testIntConst - testIntGlobal);
    showIntResults(8, 10584, testIntConst * testIntGlobal);
    showIntResults(9, 6, testIntConst / testIntGlobal);
    
    showIntResults(10, -42, -testIntGlobal);
    showIntResults(11, 0, !testIntConst);
    showIntResults(12, -253, ~testIntConst);
    
    i = 20;
    j = i++;
    showIntResults(13, 21, i);
    showIntResults(14, 20, j);
    j = i--;
    showIntResults(15, 20, i);
    showIntResults(16, 21, j);
    j = ++i;
    showIntResults(17, 21, i);
    showIntResults(18, 21, j);
    j = --i;
    showIntResults(19, 20, i);
    showIntResults(20, 20, j);

    log("\nTest Int expressions\n"); 
    showIntResults(21, 2984, testIntTable[1] + TestSizeDef * testIntConst - testIntGlobal);
    showIntResults(22, 2940, (testIntTable[1] + TestSizeDef) * (testIntConst - testIntGlobal));

    log("\nTest Float values\n"); 
    showFloatResults(23, 3.5, testFloatConst);
    showFloatResults(24, 2.5, testFloatTable[1]);
    showFloatResults(25, 7.5, testFloatTable[3]);
    showFloatResults(26, 6.5, testFloatGlobal);

    log("\nTest Float operators\n"); 
    showFloatResults(27, 10, testFloatConst + testFloatGlobal);
    showFloatResults(28, -3, testFloatConst - testFloatGlobal);
    showFloatResults(29, 22.75, testFloatConst * testFloatGlobal);
    showFloatResults(30, 2.5, 16.25 / testFloatGlobal);

    log("\nTest Float expressions\n"); 
    showFloatResults(31, 38, testFloatTable[1] + Float(TestSizeDef) * testFloatConst - testFloatGlobal);
    showFloatResults(32, -43.5, (testFloatTable[1] + Float(TestSizeDef)) * (testFloatConst - testFloatGlobal));

    showFloatResults(33, -6.5, -testFloatGlobal);

    log("\nDone\n\n");
}

command test 1 test test;
