/*-------------------------------------------------------------------------
    This source file is a part of Clover
    For the latest info, see https://github.com/cmarrin/Clover
    Copyright (c) 2021-2022, Chris Marrin
    All rights reserved.
    Use of this source code is governed by the MIT license that can be
    found in the LICENSE file.
-------------------------------------------------------------------------*/

def TestSizeDef 12;

const int testIntConst 0xfc;
const float testFloatConst 3.5;

table int testIntTable
{
    1 2 3
    7 8 9
}

table float testFloatTable
{
    1.5 2.5 3.5
    7.5 8.5 9.5
}

var int testNo;
var int testIntGlobal;
var float testFloatGlobal;

function showHeader(int isFloat, int type)
{
    if (isFloat) {
        log("\nFloat ");
    } else {
        log("\nInt ");
    }
    
    if (type == 0) {
        log("val");
    } else  if (type == 1) {
        log("binop");
    } else  if (type == 2) {
        log("unop");
    } else  if (type == 3) {
        log("mixed expr");
    } else  if (type == 4) {
        log("loop");
    } else  if (type == 5) {
        log("struct");
    } else  if (type == 6) {
        log("ref");
    }
    log(" tests\n");
}

function showIntResults(int exp, int act)
{
    log("    Test %i: ", testNo++);
    if (exp != act) {
        log("FAIL: exp %i, got %i\n", exp, act);
    } else {
        log("Passed\n");
    }
}

function showFloatResults(float exp, float act)
{
    log("    Test %i: ", testNo++);
    if (exp != act) {
        log("FAIL: exp %f, got %f\n", exp, act);
    } else {
        log("Pass\n");
    }
}

function test()
{
    var int i;
    var float f;
    
    testFloatConst == 3.5;

    testIntGlobal = 42;
    testFloatGlobal = 6.5;

    testNo = 1;

    showHeader(0, 0);
    showIntResults(TestSizeDef, 12);
    showIntResults(testIntConst, 0xfc);
    showIntResults(testIntTable[1], 2);
    showIntResults(testIntTable[3], 7);
    showIntResults(testIntGlobal, 42);
    
    showHeader(0, 3);
    showIntResults(2984, testIntTable[1] + TestSizeDef * testIntConst - testIntGlobal);

    showHeader(1, 0);
    showFloatResults(testFloatConst, 3.5);
    showFloatResults(testFloatTable[1], 2.5);
    showFloatResults(testFloatTable[3], 7.5);
    showFloatResults(testFloatGlobal, 6.5);

    showHeader(1, 1);
    showFloatResults(38.0, testFloatTable[1] + Float(TestSizeDef) * testFloatConst - testFloatGlobal);

    log("\nDone\n\n");
}

command test 1 test test;
